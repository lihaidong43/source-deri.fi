// this file is generated by script, don't modify it !!!
import { debug } from 'util'
import { fromWei } from '../../utils/bignumber.js'
import { deleteIndexedKey } from '../../utils/lang.js'
import { brokerImplementationAbi } from '../abi/brokerImplementationAbi.js'
import { ContractBase } from '../contract_base.js'

export class BrokerImplementation extends ContractBase {
  // init
  constructor(chainId, contractAddress, opts = {}) {
    super(chainId, contractAddress, brokerImplementationAbi, opts.isNodeEnv)
    // for pool use
    this.initialBlock = opts.initialBlock || ""
    this.config = opts.config || {}
  }

  // query
  async admin() {
    const res = await this._call('admin', [])
    return deleteIndexedKey(res)
  }
  async bets(address_1, address_2, bytes32_1) {
    const res = await this._call('bets', [address_1, address_2, bytes32_1])
    return deleteIndexedKey(res)
  }
  async clientImplementation() {
    const res = await this._call('clientImplementation', [])
    return deleteIndexedKey(res)
  }
  async clientTemplate() {
    const res = await this._call('clientTemplate', [])
    return deleteIndexedKey(res)
  }
  async getBetVolumes(account, pool, symbols) {
    const res = await this._call('getBetVolumes', [account, pool, symbols])
    return deleteIndexedKey(res).map((r) => fromWei(r))
  }
  async implementation() {
    const res = await this._call('implementation', [])
    return deleteIndexedKey(res)
  }
  // async nameId() {
  //   const res = await this._call('nameId', [])
  //   return deleteIndexedKey(res)
  // }
  // async versionId() {
  //   const res = await this._call('versionId', [])
  //   return deleteIndexedKey(res)
  // }

  // tx
  async claimInterestAsLp(accountAddress, pool, clients, opts={}) {
    return await this._transact('claimInterestAsLp', [pool, clients], accountAddress, opts)
  }
  async claimInterestAsTrader(accountAddress, pool, clients, opts={}) {
    return await this._transact('claimInterestAsTrader', [pool, clients], accountAddress, opts)
  }
  async closeBet(accountAddress, pool, symbolName, priceLimit, oracleSignatures, opts={}) {
    return await this._transact('closeBet', [pool, symbolName, priceLimit, oracleSignatures], accountAddress, opts)
  }
  async openBet(accountAddress, pool, asset, amount, symbolName, tradeVolume, priceLimit, oracleSignatures, opts={}) {
    return await this._transact('openBet', [pool, asset, amount, symbolName, tradeVolume, priceLimit, oracleSignatures], accountAddress, opts)
  }
  // async setAdmin(accountAddress, newAdmin, opts={}) {
  //   return await this._transact('setAdmin', [newAdmin], accountAddress, opts)
  // }
  // async transfer(accountAddress, asset, to, amount, opts={}) {
  //   return await this._transact('transfer', [asset, to, amount], accountAddress, opts)
  // }

}